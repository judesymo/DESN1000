#include <Arduino.h>
#include <array>

#define HIGH_THRESHOLD 512   // Define threshold to differentiate HIGH/LOW from analogRead
#define LOW_THRESHOLD 512

#define OUTPUT_PIN_1 9       // Pin for output voltage 1V
#define OUTPUT_PIN_2 10      // Pin for output voltage 0V
#define OUTPUT_PIN_3 11      // Pin for output voltage -1V

// Function prototypes
int correct_signal(std::array<int, 16>& mic_array, std::array<int, 16>& xor_array, std::array<int, 16>& led_array,
                   int f_mic_l, int f_mic_r, int f_led_l, int f_led_r);

void determine_outputs(float v_mic_l, float v_mic_r, float v_led_l, float v_led_r, int x_or_count);

// Setup function for Arduino
void setup() {
    pinMode(OUTPUT_PIN_1, OUTPUT);  // Set output pin for 1V
    pinMode(OUTPUT_PIN_2, OUTPUT);  // Set output pin for 0V
    pinMode(OUTPUT_PIN_3, OUTPUT);  // Set output pin for -1V

    Serial.begin(9600);             // Initialize serial communication for debugging
}

// Main loop for Arduino
void loop() {
    // Replace these analogRead/digitalRead functions with actual pin numbers
    int f_mic_l = analogRead(A0);   // Read frequency of left mic from analog pin A0
    int f_mic_r = analogRead(A1);   // Read frequency of right mic from analog pin A1
    int f_led_l = analogRead(A2);   // Read frequency of left LED from analog pin A2
    int f_led_r = analogRead(A3);   // Read frequency of right LED from analog pin A3

    float v_mic_l = analogRead(A4); // Read voltage of left mic from analog pin A4
    float v_mic_r = analogRead(A5); // Read voltage of right mic from analog pin A5
    float v_led_l = analogRead(A6); // Read voltage of left LED from analog pin A6
    float v_led_r = analogRead(A7); // Read voltage of right LED from analog pin A7

    std::array<int, 16> mic_array;  // Array to hold mic signal bits
    std::array<int, 16> led_array;  // Array to hold LED signal bits
    std::array<int, 16> xor_array;  // Array to hold XOR result

    // Calculate XOR count
    int x_or_count = correct_signal(mic_array, xor_array, led_array, f_mic_l, f_mic_r, f_led_l, f_led_r);

    // Determine the outputs based on the inputs and XOR count
    determine_outputs(v_mic_l, v_mic_r, v_led_l, v_led_r, x_or_count);

    delay(1000);  // Delay for 1 second before next reading
}

// x_or code, determining if the signal is correct
int correct_signal(std::array<int, 16>& mic_array, std::array<int, 16>& xor_array, std::array<int, 16>& led_array,
                   int f_mic_l, int f_mic_r, int f_led_l, int f_led_r) {

    for (int i = 0; i < 16; i++) {
        mic_array[i] = (f_mic_l >= HIGH_THRESHOLD && f_mic_r >= HIGH_THRESHOLD) ? HIGH : LOW;
        led_array[i] = (f_led_l >= HIGH_THRESHOLD && f_led_r >= HIGH_THRESHOLD) ? HIGH : LOW;
        xor_array[i] = (led_array[i] != mic_array[i]) ? 1 : 0;
    }

    int x_or_count = 0;
    for (int j = 1; j < 16; j++) {
        if (xor_array[j - 1] != xor_array[j]) {
            x_or_count++;
        }
    }

    return x_or_count;  // If count == 15, the signal is considered correct
}

// Determines the output voltages based on the signal conditions
void determine_outputs(float v_mic_l, float v_mic_r, float v_led_l, float v_led_r, int x_or_count) {
    if (x_or_count == 15) {
        if (v_led_l != v_led_r) {
            if (v_mic_l == HIGH && v_mic_r == HIGH) {
                // Output 0V on OUTPUT_PIN_2
                digitalWrite(OUTPUT_PIN_1, LOW);
                digitalWrite(OUTPUT_PIN_2, HIGH);
                digitalWrite(OUTPUT_PIN_3, LOW);
            } else if (v_mic_l > v_mic_r) {
                // Output 1V on OUTPUT_PIN_1
                digitalWrite(OUTPUT_PIN_1, HIGH);
                digitalWrite(OUTPUT_PIN_2, LOW);
                digitalWrite(OUTPUT_PIN_3, LOW);
            } else if (v_mic_l < v_mic_r) {
                // Output -1V on OUTPUT_PIN_3
                digitalWrite(OUTPUT_PIN_1, LOW);
                digitalWrite(OUTPUT_PIN_2, LOW);
                digitalWrite(OUTPUT_PIN_3, HIGH);
            }
        }
    }
}
