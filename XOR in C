//there are 4 inputs, a left speaker, a right speaker, 
//a left phototransistorreciever and right phototransistor reciever. 

// 3 outputs, 1V, -1V, 0V

//record the voltage and frequency of all components
// frequency of IR phototransistor (led) is CLK^WAVE, CLK = 20kHz, WAVE = 1.25khZ
// frequency of speaker is WAVE

// need to determine what is considered high and what is considered low
// for frequency and for voltage.

// the maximum amplitude for the IR transistor is 17.5 V
// the maximum amplitude for the mic is 12.5 V

#define HIGH 1
#define LOW 0

#include <stdio.h>

int correct_signal(int mic_array[16], int xor_array[16], int led_array[16], 
    int f_mic_l, int f_mic_r, int f_led_l, int f_led_r);

int determine_outputs(float v_mic_l, float v_mic_r, 
    float v_led_l, float v_led_r, int x_or_count);


    int main(void){

    float f_mic_l;
    float f_mic_r;
    float f_led_l;
    float f_led_r;
    float v_mic_l;
    float v_mic_r;
    float v_led_l;
    float v_led_r;
    


    int mic_array[16]; // there are 16 bits of information (high or low) per cycle
    int led_array[16];
    int xor_array[16];
    int x_or_count;

    x_or_count = correct_signal(mic_array, xor_array, led_array, 
        f_mic_l, f_mic_r, f_led_l, f_led_r);

    determine_outputs(v_mic_l, v_mic_r, v_led_l, v_led_r, x_or_count);

    return 0;
}

// x_or code, determining if the signal is correct
int correct_signal(int mic_array[16], int xor_array[16], int led_array[16], 
    float f_mic_l, float f_mic_r, float f_led_l, float f_led_r) {
    
    int t = 0;
    while (t < 0.0008) { // f = 1/t = 1/(1.25kHz)
        for (int i = 0; i < 16; i++){ 

            if ((f_mic_l == HIGH) && (f_mic_r == HIGH)) {
                mic_array[i] = HIGH;
            }

            else if ((f_mic_l == LOW) && (f_mic_r == LOW)){
                mic_array[i] = LOW;

            }

            if ((f_led_l == HIGH) && (f_led_r == HIGH)) {
                led_array[i] = HIGH;
            }

            else if ((f_led_l == LOW) && (f_led_r == LOW)){
                led_array[i] = LOW;

            }

            
            if (led_array[i] != mic_array[i]){
                xor_array[i] = 1; 
            }

            else if (led_array[i] == mic_array[i]){
                xor_array[i] = 0;
            
            }
        int x_or_count = 0;   
        for (int j = 1; j < 16;j++){
            if (xor_array[j-1] != xor_array[j]){
                x_or_count++; 
            }


        }

        return x_or_count; // if count == 15 signal is correct
        }
    t = 0;
    }
}

int determine_outputs(float v_mic_l, float v_mic_r, float v_led_l, float v_led_r, int x_or_count) {
    while (x_or_count == 15) {
        while (v_led_l != v_led_r) {

            if (v_led_l == HIGH && v_led_l == HIGH) {
                return 0; //exterminate output and LED_t
            } else if (v_mic_l > v_mic_r) {
                return 1; // clockwise turn output and led_l
            } else if (v_mic_l < v_mic_r) {
                return -1; //anticlockwise turn output and led_r
            }
        }
    }
}
